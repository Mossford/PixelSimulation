#version 460 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(location = 0) uniform vec2 resolution;
layout(location = 1) uniform vec2 particleResolution;
layout (std430, binding = 5) restrict buffer lights
{
//x is the index (convert float to int)
//y is the color (convert float to color)
//z is the intensity 
//w is the range
    vec4 Lights[];
} particleLights;
layout(rgba32f, binding = 0) uniform image2D lightingTex;

vec4 UnpackFloat(float data)
{
    int ColorBits = floatBitsToInt(data);
    return vec4((ColorBits & 0xFF) / 255.0, ((ColorBits >> 8) & 0xFF) / 255.0, ((ColorBits >> 16) & 0xFF) / 255.0, ((ColorBits >> 24) & 0xFF) / 255.0);
}
vec4 CalculateLighting(vec2 particlePos, int index)
{
    //check if there is a particle at this position
    if(floatBitsToInt(particleLights.Lights[index].x) == -1)
    return vec4(1.0);

    int range = floatBitsToInt(particleLights.Lights[index].w);

    vec4 totalAccumLight = vec4(0);
    int totalAccumLightCount = 0;
    float cornerPreCalc = particleResolution.x * particleResolution.y;
    for(int xL = -range; xL < range; xL++)
    {
        for(int yL = -range; yL < range; yL++)
        {
            vec2 lightPos = vec2(particlePos.x + xL, particlePos.y + yL);

            int indexLight = int((lightPos.x * particleResolution.y) - lightPos.y + particleResolution.y - 1);

            if(indexLight < 0 || indexLight >= cornerPreCalc)
            continue;

            //handle bleed over. X pos is handled by bounds checking
            if(lightPos.y > particleResolution.y || lightPos.y < 0)
            continue;

            totalAccumLightCount++;

            vec4 lightColor = UnpackFloat(particleLights.Lights[indexLight].y);
            float intensity = round(particleLights.Lights[indexLight].z);

            totalAccumLight += lightColor * intensity;

        }
    }

    if (totalAccumLightCount > 0)
    {
        totalAccumLight /= float(totalAccumLightCount);
    }

    return totalAccumLight;
}

void main()
{
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 fragPos = pixelCoords / resolution;
    int x = int(pixelCoords.x);
    int y = int(pixelCoords.y);
    int index = int((x * particleResolution.y) - y + particleResolution.y - 1);
    vec4 particleLighting = CalculateLighting(vec2(x,y), index);
    
    imageStore(lightingTex, pixelCoords, particleLighting);
}
